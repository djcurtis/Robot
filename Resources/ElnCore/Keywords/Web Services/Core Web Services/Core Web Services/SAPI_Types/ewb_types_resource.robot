*** Settings ***
Documentation     This resource provides keywords for building specific instances of SAPI types, e.g. experiment DTO, text item DTO.
Library           XMLLibrary
Resource          sapi_entity_types_resources.txt    # Builder for SAPI types
Resource          sapi_cache_types_resource.txt    # Builders for SAPI entity cache types
Resource          sapi_common_types_resource.txt

*** Variables ***

*** Keywords ***
Build Experiment DTO
    [Arguments]    ${name}    ${title}
    [Documentation]    Build the SAPIEntityDefinition for an experiment
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the experiment name
    ...
    ...    _title_ - the experiment attribute title
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_updated_info}=    Set Variable    ${EMPTY}    # experiment has no data info
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    title=${title}    statusName=Started    # mandatory attribute
    ${entity_definition_node}=    Build SAPIEntityDefinition    EXPERIMENT    ${name}    ${sapi_data_updated_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Project DTO
    [Arguments]    ${name}    ${title}
    [Documentation]    Build the SAPIEntityDefinition for a project
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the project name
    ...
    ...    _title_ - the project attribute title
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_updated_info}=    Set Variable    ${EMPTY}    # project has no data info
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    title=${title}    # mandatory attribute
    ${entity_definition_node}=    Build SAPIEntityDefinition    PROJECT    ${name}    ${sapi_data_updated_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Web Link DTO
    [Arguments]    ${name}    ${url}    ${publishingState}=Unpublished
    [Documentation]    Build the SAPIEntityDefinition for an web link entity
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the name to give to the web link
    ...
    ...    _url_ - the web link URL
    ...
    ...    _publishingState_ - the publishing state attribute value. Default value is 'Unpublished'
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_info}=    Build SAPIDataInfo    application/x-url    .url    WEB_LINK
    ${sapi_data_update}=    Build SAPIDataUpdate    ${url}
    ${sapi_data_update_info}=    Build SAPIDataUpdateInfo    ${sapi_data_update}    ${sapi_data_info}
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    publishingState=${publishingState}    itemType=Web Link
    ${entity_definition_node}=    Build SAPIEntityDefinition    DOCUMENT    ${name}    ${sapi_data_update_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Group DTO
    [Arguments]    ${name}
    [Documentation]    Build the SAPIEntityDefinition for a group entity
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the group name
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_updated_info}=    Set Variable    ${EMPTY}    # project has no data info
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    name=${name}    # mandatory attribute
    ${entity_definition_node}=    Build SAPIEntityDefinition    GROUP    ${name}    ${sapi_data_updated_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Save As Draft DTO
    [Arguments]    ${entity_id}
    [Documentation]    Build the SAPICommit for DRAFT saving
    ...
    ...    *Arguments*
    ...
    ...    _entity_id_ - the id of the entity to be saved as DRAFT
    ...
    ...    *Return value*
    ...
    ...    The SAPICommit as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${xml_object}=    Build SAPICommit    ${entity_id}    DRAFT
    ${sapi_commit}=    XMLLibrary.Get Xml    ${xml_object}    ${ENTITY_XMLNS}
    [Return]    ${sapi_commit}    # The SAPICommit as XML literal

Build Page Break DTO
    [Documentation]    Build the SAPIEntityDefinition for a page break entity
    ...
    ...    *Arguments*
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_info}=    Build SAPIDataInfo    application/x-idbs-pagebreak    ${EMPTY}    PAGE_BREAK
    ${sapi_data_update}=    Set Variable    ${EMPTY}
    ${sapi_data_update_info}=    Build SAPIDataUpdateInfo    ${sapi_data_update}    ${sapi_data_info}
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    publishingState=Unpublished    allowDropUpdate=false    pinnedEntity=false
    ${entity_definition_node}=    Build SAPIEntityDefinition    PAGE_BREAK_DOCUMENT    ${EMPTY}    ${sapi_data_update_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Template DTO
    [Arguments]    ${name}    ${title}
    [Documentation]    Build the SAPIEntityDefinition for a tempalte
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the template name
    ...
    ...    _title_ - the template attribute title
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_updated_info}=    Set Variable    ${EMPTY}    # experiment has no data info
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    title=${title}    statusName=Started    # mandatory attribute
    ${entity_definition_node}=    Build SAPIEntityDefinition    TEMPLATE    ${name}    ${sapi_data_updated_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Delete Entity DTO
    [Arguments]    ${reason}    ${additional_comment}=${EMPTY}
    [Documentation]    Build the SAPIUserActionInfo used to delete an entity
    ...
    ...    *Arguments*
    ...
    ...    _reason_ - the reason for the action
    ...
    ...    _additional_comment_ - the author additional commnet. This is optional.
    ...
    ...    *Return value*
    ...
    ...    The SAPIUserActionInfo as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${user_action_info_node}=    Build SAPIUserActionInfo    ${reason}    ${additional_comment}
    ${sapi_user_action_info}=    XMLLibrary.Get Xml    ${user_action_info_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_user_action_info}    # The SAPIUserActionInfo as XML literal

Build Sign Off DTO
    [Arguments]    ${role}    ${reason}    ${additional_comment}=${EMPTY}    @{entity_ids}
    [Documentation]    Build the SAPISignOff DTO
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the experiment name
    ...
    ...    _title_ - the experiment attribute title
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_user_action_info_node}=    Build SAPIUserActionInfo    ${reason}    ${additional_comment}
    ${sapi_id_sequence_node}=    Build SAPIIdSequence    @{entity_ids}
    ${sapi_sign_off_node}=    Build SAPISignOff    ${role}    ${sapi_user_action_info_node}    ${sapi_id_sequence_node}
    ${sapi_sign_off}=    XMLLibrary.Get Xml    ${sapi_sign_off_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_sign_off}    # The SAPISignOff as XML literal

Build Replace Item With Existing Item DTO
    [Arguments]    ${source_entity_id}    ${entity_name}=${EMPTY}    @{attributes}
    [Documentation]    Build the SAPIReplaceEntityInfo to replace a record item with enother record item
    ...
    ...    *Arguments*
    ...
    ...    ${source_entity_id} | ${entity_name}=${EMPTY} | @{attributes}
    ...
    ...    _source_entity_id_ - the entity id of the replacing item
    ...
    ...    _entity_name_ - the entity name of the replacing item. This can be different from the entity name of the source entity
    ...
    ...    _attributes_ - the list of atributes for the replacing entity. Attributes from the source entity can be replaced. The list of tattributes is a list of <attribute name, attribute value> pairs. Each cell is of the form attributeName=value
    ...
    ...    *Return value*
    ...
    ...    The SAPIReplaceEntityInfo as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ...
    ...    Build Replace ItemWith Existing Itam DTO | 123 | My PDF | title=myTitle | publishingState=Unpublished
    ${attribute_update_sequence_node}=    Build SAPIAttributeUpdateSequence    @{attributes}
    ${existing_enity_info_node}=    Build SAPIExistingEntityInfo    ${source_entity_id}    ${entity_name}    ${attribute_update_sequence_node}
    ${replace_entity_info_node}=    Build SAPIReplaceEntityInfo    ${EMPTY}    ${existing_enity_info_node}
    ${replace_entity_info}=    XMLLibrary.Get Xml    ${replace_entity_info_node}    ${ENTITY_XMLNS}
    [Return]    ${replace_entity_info}    # The SAPIReplaceEntityInfo as XML literal

Build Inbox Items DTO
    [Arguments]    @{inbox_detail_list}    # Each element argument MUST be provided as scalar, e.g. ${details1} | ${details2}
    [Documentation]    Build the SAPIInboxDetailSequence to add inbox items to a record
    ...
    ...    *Arguments*
    ...
    ...    _inbox_detail_list_ - the list of inbox details. Each element argument MUST be provided as scalar, e.g. ${details1} | ${details2}. Each inbox detail element is a list with the following item (order matters): inbox entity id, entity type name, file name, mime type, data type. See example.
    ...
    ...    *Return value*
    ...
    ...    The SAPIInboxDetailSequence as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ...
    ...    @{inbox_detail_1}= Create List ${inboxId1} ${typeName1} ${fileName1} ${mimeType1} ${dataType1}
    ...
    ...    @{inbox_detail_2}= Create List ${inboxId2} ${typeName2} ${fileName2} ${mimeType2} ${dataType2}
    ...
    ...    ${xml}= Build SAPIInboxDetailSequence ${inbox_detail_1} ${inbox_detail_2}
    ${sapi_inbox_detail_sequence_node}=    Build SAPIInboxDetailSequence    @{inbox_detail_list}
    ${sapi_inbox_detail_sequence}=    XMLLibrary.Get Xml    ${sapi_inbox_detail_sequence_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_inbox_detail_sequence}    # The SAPIInboxDetailSequence as XML literal

Build Link Entity DTO
    [Arguments]    ${name}    ${link_type}    ${data_text}    ${publishingState}=Unpublished
    [Documentation]    Build the SAPIEntityDefinition for an entity link entity
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the name to give to the entity link
    ...
    ...    _link_type_ - the link entity type, e.g. WEB_LINK
    ...
    ...    _data_text_ - the entity link text data, e.g. a URI, a web link
    ...
    ...    _publishingState_ - the publishing state attribute value. Default value is 'Unpublished'
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_info}=    Build SAPIDataInfo    application/x-url    .url    ${link_type}
    ${sapi_data_update}=    Build SAPIDataUpdate    ${data_text}
    ${sapi_data_update_info}=    Build SAPIDataUpdateInfo    ${sapi_data_update}    ${sapi_data_info}
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    publishingState=${publishingState}    itemType=Web Link
    ${entity_definition_node}=    Build SAPIEntityDefinition    DOCUMENT    ${name}    ${sapi_data_update_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Jpeg Image Entity DTO
    [Arguments]    ${name}    ${binary_data}    ${publishingState}=Unpublished
    [Documentation]    Build the SAPIEntityDefinition for an a JPEG image
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the name to give to the entity link
    ...
    ...    _data_ - the image bytes
    ...
    ...    _publishingState_ - the publishing state attribute value. Default value is 'Unpublished'
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_info}=    Build SAPIDataInfo    image/jpeg    .jpg    JPG_IMAGE
    ${sapi_data_update}=    Build SAPIDataUpdate    ${EMPTY}    ${binary_data}
    ${sapi_data_update_info}=    Build SAPIDataUpdateInfo    ${sapi_data_update}    ${sapi_data_info}
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    publishingState=${publishingState}
    ${entity_definition_node}=    Build SAPIEntityDefinition    DOCUMENT    ${name}    ${sapi_data_update_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Generic Entity DTO
    [Arguments]    ${name}    ${entity_type}    ${mime_type}    ${file_extension}    ${data_type}    ${binary_data}
    ...    ${text_data}    ${publishingState}=Unpublished
    [Documentation]    Build the SAPIEntityDefinition for an a generic entity
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the name to give to the entity link
    ...
    ...    _entity_type_ - the entity type, e.g. DOCUMENT, FILE.
    ...
    ...    _mime_type_ - The mime-type, e.g. application/xml, image/jpg.
    ...
    ...    _file_extension_ - The file extension, e.g. .jpeg, .txt.
    ...
    ...    _data_type_ - The data type, e.g. JPG_IMAGE, PLAIN_TEXT, FILE.
    ...
    ...    _binary_data_ - the binary data. Default is ${EMPTY}.
    ...
    ...    _text_data_ - the text data. Default is ${EMPTY}.
    ...
    ...    _publishingState_ - the publishing state attribute value. Default value is 'Unpublished'.
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_info}=    Build SAPIDataInfo    ${mime_type}    ${file_extension}    ${data_type}
    ${sapi_data_update}=    Build SAPIDataUpdate    ${text_data}    ${binary_data}
    ${sapi_data_update_info}=    Build SAPIDataUpdateInfo    ${sapi_data_update}    ${sapi_data_info}
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    publishingState=${publishingState}
    ${entity_definition_node}=    Build SAPIEntityDefinition    ${entity_type}    ${name}    ${sapi_data_update_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal

Build Landing Page DTO
    [Arguments]    ${name}
    [Documentation]    Build the SAPIEntityDefinition for a Landing Page
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the experiment name
    ...
    ...    *Return value*
    ...
    ...    The SAPIEntityDefinition as XML literal
    ...
    ...    *Precondition*
    ...
    ...    *Example*
    ${sapi_data_updated_info}=    Set Variable    ${EMPTY}    # experiment has no data info
    ${sapi_attribute_update_sequence}=    Build SAPIAttributeUpdateSequence    name=${name}    # mandatory attribute
    ${entity_definition_node}=    Build SAPIEntityDefinition    LANDING_PAGE    ${name}    ${sapi_data_updated_info}    ${sapi_attribute_update_sequence}
    ${sapi_entity_definition}=    XMLLibrary.Get Xml    ${entity_definition_node}    ${ENTITY_XMLNS}
    [Return]    ${sapi_entity_definition}    # The SAPIEntityDefinition as XML literal
