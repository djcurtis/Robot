*** Settings ***
Documentation     Covering the */services/1.0/tasks/Ignore* endpoint
Test Setup        Workflow Service Test Case Setup
Resource          ../../../Libraries/common_resource.txt    # Common Resource
Resource          ../../../Libraries/Web Services/REST_TaskService/rest_workflow_service_resource.txt    # Workflow WS Resource
Resource          ../../../Libraries/Web Services/REST_TaskService/rest_task_service_resource.txt    # Task WS Resource

*** Test Cases ***
Test 1 - Try to Ignore when User is the only Remaining Assignee
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow assigned to two users
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Ignore as each user in turn, the second (last) shouldn't be allowed to
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Ignore Multiple Tasks    ${new task id}
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 2 - Try to Ignore when User is not an Assignee
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow assigned to two users
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Ignore task as user who isn't assigned to the task
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 3a - Ignore New Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Ignore Task should work here
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Ignore Multiple Tasks    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 3b - Ignore New-Overdue Task
    # Obtain due date that is yesterday
    ${new due date}=    Create Due Date Format    NOW - 1 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    Wait For Overdue Task
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW_OVERDUE
    # Ignore Task should work here
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Ignore Multiple Tasks    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW_OVERDUE
    #Validate assigned users (WorflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 3c - Ignore Pending Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 1 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task 1 json}=    Create Task JSON For Multiple Task Workflow    NON_TEST    WF4_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${task 2 json}=    Create Task JSON For Multiple Task Workflow    NON_TEST    WF4_SIGN1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${task 3 json}=    Create Task JSON For Multiple Task Workflow    NON_TEST    WF4_ALERT1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${task setup json}=    Set Variable    {"taskSetup": [${task 1 json},${task 2 json},${task 3 json}]}
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 4    ${new due date}    false
    ...    Normal    ${task setup json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    2
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=PENDING
    # Ignore Task should fail here
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (PENDING)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=PENDING
    #Validate assigned users (WorflowWSUser1 and Administrator)
    @{UserNames}=    Create List    Administrator    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 3d - Ignore In Progress Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Accept Task
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Accept Multiple Tasks    ${new task id}
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=IN_PROGRESS
    # Ignore Task should fail here (as accepted already)
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=IN_PROGRESS
    #Validate assigned users (WorkflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 3e - Ignore In Progress Overdue Task
    # Obtain due date that is yesterday
    ${new due date}=    Create Due Date Format    NOW - 1 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    Wait For Overdue Task
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW_OVERDUE
    # Accept Task
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Accept Multiple Tasks    ${new task id}
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=IN_PROGRESS_OVERDUE
    # Ignore Task should fail here (as accepted already)
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=IN_PROGRESS_OVERDUE
    #Validate assigned users (WorkflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 3f - Ignore Completed Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Accept and Complete Task
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Accept Multiple Tasks    ${new task id}
    Complete Multiple Tasks    ${new task id}
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=COMPLETED
    # Ignore Task should fail here (as completed already)
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=COMPLETED

Test 3g - Ignore Cancelled Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Cancel Task
    Cancel Multiple Tasks    ${new task id}
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=CANCELLED
    # Ignore Task should fail here (as cancelled already)
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=CANCELLED

Test 3h - Ignore Rejected Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Cancel Task
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Reject Multiple Tasks    ${new task id}
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=REJECTED
    # Ignore Task should fail here (as rejected already)
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=REJECTED

Test 3i - Ignore Closed Task
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Complete Task
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Accept Multiple Tasks    ${new task id}
    Complete Multiple Tasks    ${new task id}
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Close Multiple Tasks    ${new task id}
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=CLOSED
    # Ignore Task should fail here (as closed already)
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Ignore Multiple Tasks And Expect Error    403    ${new task id}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=CLOSED

Test 4 - Ignore Non Existent Task
    #Try to Ignore a dummy GUID
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    #Dummy GUID
    ${new task id}=    Set Variable    ff8a69b05bd411e2ae4e0023ae89b843
    Ignore Multiple Tasks And Expect Error    404    ${new task id}

Test 5 - Unexpected Characters In TaskID
    #Requesting an Ignore with a series of unexpected characters in the TaskID, expect a 40x not a 50x
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    #Uppercase
    ${new task id}=    Set Variable    FFFF69b05bd411e2ae4e0023ae89b843
    Ignore Multiple Tasks And Expect Error    404    ${new task id}
    #non hex letters
    ${new task id}=    Set Variable    QWER69b05bd411e2ae4e0023ae89b843
    Ignore Multiple Tasks And Expect Error    404    ${new task id}
    #Symbols
    ${new task id}=    Set Variable    !'%^&*()d411e2ae4e0023ae89b843ee
    Ignore Multiple Tasks And Expect Error    404    ${new task id}

Test 6 - TaskID is too long
    #Try to use a TaskID that is too long, expect a 404 error not a 50x exception
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    #Dummy GUID
    ${new task id}=    Set Variable    ff8a69b05bd411e2ae4e0023ae89b843ffffffffffff
    Ignore Multiple Tasks And Expect Error    404    ${new task id}

Test 7 - TaskID is blank
    #Try to use a TaskID that is too long, expect a 404 error not a 50x exception
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    #Dummy GUID
    ${new task id}=    Set Variable
    Ignore Multiple Tasks And Expect Error    404    ${new task id}

Test 8a - Try to Ignore 2 tasks where User is the only Remaining Assignee for one of the Tasks
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflows assigned to two users
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    ${task json2}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id2}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json2}
    # Get task IDs
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${new task id2}=    Get Task ID From Workflow ID    ${sign off workflow id2}    1
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    Validate Task    ${workflow tasks JSON2}    task_status=NEW
    # Ignore Task1 as one of the users
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    Ignore Multiple Tasks    ${new task id}
    # Try to ignore both tasks as the other user, using both orderings of the two tasks
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    @{task ids}=    Create List    ${new task id}    ${new task id2}
    Ignore Multiple Tasks And Expect Error    403    @{task ids}
    @{task ids}=    Create List    ${new task id2}    ${new task id}
    Ignore Multiple Tasks And Expect Error    403    @{task ids}
    # Validate Task Statuses (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    Validate Task    ${workflow tasks JSON2}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 ONLY for task 1 and WorflowWSUser1 \ and Administrator for task 2)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}
    @{UserNames}=    Create List    Administrator    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON2}    all_assigned_users=${UserNameJSON}

Test 8b - Try to Ignore 2 tasks where User is not an Assignee for one of the Tasks
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflows assigned to different users
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    ${task json2}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id2}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json2}
    # Get task IDs
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${new task id2}=    Get Task ID From Workflow ID    ${sign off workflow id2}    1
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    Validate Task    ${workflow tasks JSON2}    task_status=NEW
    # Try to ignore both tasks as a single user, using both orderings of the two tasks
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    @{task ids}=    Create List    ${new task id}    ${new task id2}
    Ignore Multiple Tasks And Expect Error    403    @{task ids}
    @{task ids}=    Create List    ${new task id2}    ${new task id}
    Ignore Multiple Tasks And Expect Error    403    @{task ids}
    # Validate Task Statuses (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    Validate Task    ${workflow tasks JSON2}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 ONLY for task 1 and Administrator ONLY for task 2)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}
    @{UserNames}=    Create List    Administrator
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON2}    all_assigned_users=${UserNameJSON}

Test 8c - Try to Ignore 2 tasks where one is NEW and one is IN_PROGRESS
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflows assigned to two users
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    ${task json2}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id2}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json2}
    # Get task IDs
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${new task id2}=    Get Task ID From Workflow ID    ${sign off workflow id2}    1
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    # Accept Task2 as one of the users
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    Accept Multiple Tasks    ${new task id2}
    #Validation
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    Validate Task    ${workflow tasks JSON2}    task_status=IN_PROGRESS
    # Try to ignore both tasks, using both orderings of the two tasks
    @{task ids}=    Create List    ${new task id}    ${new task id2}
    Ignore Multiple Tasks And Expect Error    403    @{task ids}
    @{task ids}=    Create List    ${new task id2}    ${new task id}
    Ignore Multiple Tasks And Expect Error    403    @{task ids}
    # Validate Task Statuses (NEW and IN_PROGRESS)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    ${workflow tasks JSON2}=    Get Task From Task ID    ${new task id2}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    Validate Task    ${workflow tasks JSON2}    task_status=IN_PROGRESS
    #Validate assigned users (WorkflowWSUser1 and Administrator for task 1 and WorflowWSUser1 ONLY for task 2)
    @{UserNames}=    Create List    Administrator    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON2}    all_assigned_users=${UserNameJSON}

Test 8d - Try to Ignore 2 tasks where One TaskID doesn't exist
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1","Administrator"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task IDs
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Try to ignore tasks alongside a made up TaskID, using both orderings of the two TaskIDs
    ${new task id2}=    Set Variable    f08a69b05bd411e2ae4e0023ae89b843
    ${SERVICES USERNAME}    Set Variable    WorkflowWSUser1
    ${SERVICES PASSWORD}    Set Variable    WorkflowWSUser11
    @{task ids}=    Create List    ${new task id}    ${new task id2}
    Ignore Multiple Tasks And Expect Error    404    @{task ids}
    @{task ids}=    Create List    ${new task id2}    ${new task id}
    Ignore Multiple Tasks And Expect Error    404    @{task ids}
    # Validate Task Status (NEW)
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 and Administrator)
    @{UserNames}=    Create List    Administrator    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}

Test 9 - Call Endpoint without valid credentials
    # Obtain due date that is one day from now
    ${new due date}=    Create Due Date Format    NOW + 7 day
    ${todays date}    Create Due Date Format    NOW
    # Create new workflow assigned to two users
    ${task json}=    Create Task JSON    NON_TEST    WF2_REVIEW1    "WorkflowWSUser1"    ${EMPTY}    Example Comment
    ${sign off workflow id}=    Create Workflow Via WS    BY_ENTITY_ID    ${wf_experiment_1}    WF WS Workflow 2    ${new due date}    false
    ...    Normal    ${task json}
    # Get task ID
    ${new task id}=    Get Task ID From Workflow ID    ${sign off workflow id}    1
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    # Ignore task as non existent user
    ${SERVICES USERNAME}    Set Variable    sssss
    ${SERVICES PASSWORD}    Set Variable    dddddd
    Ignore Multiple Tasks And Expect Error    401    ${new task id}
    # Validate Task Status (NEW)
    ${SERVICES USERNAME}    Set Variable    Administrator
    ${SERVICES PASSWORD}    Set Variable    Administrator
    ${workflow tasks JSON}=    Get Task From Task ID    ${new task id}
    Validate Task    ${workflow tasks JSON}    task_status=NEW
    #Validate assigned users (WorflowWSUser1 ONLY)
    @{UserNames}=    Create List    WorkflowWSUser1
    ${UserNameJSON}=    Build JSON for Multiple UserNames    @{UserNames}
    Validate Task    ${workflow tasks JSON}    all_assigned_users=${UserNameJSON}
