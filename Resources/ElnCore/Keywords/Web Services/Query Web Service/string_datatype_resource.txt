*** Settings ***
Documentation     This resource file is for testing HUB-API-SSP-QUE-QLC.\n\nThis resource file contains queries that have string filters conditions. \ \n\nThe queries in this resource file will only work with the data that is stored in "....\\EWB Automated Tests\\Libraries\\Web Services\\Query Web Service\\tuple data resource.txt"
Resource          query_resources.txt
Library           TestDataGenerationLibrary
Library           OperatingSystem

*** Keywords ***
Run String Datatype Query
    [Arguments]    ${term path}    ${stringColumn}    ${timestampColumn}
    [Documentation]    This keyword will execute a number queries that have a string filter condition. \ \n\nThis is testing HUB-API-SSP-QUE-QLC. \n\n\n*Arguments*\n\n- ${term path} = The path to the term to be queried. \n- ${stringColumn} = The name of a string property in the term in ${term path}.\n- ${timestampColumn} = The name of a timestamp property in the term in ${term path}.
    # select string property
    Execute Data Query and Verify Values    SELECT ${stringColumn} FROM ${term path}    Mixed Case String    Mixed Case String    string with 'quotes'    string with %    ${null value}
    ...    ${null value}    ${null value}
    # LIKE operator
    Execute Data Query and Verify Values    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} LIKE 'M_xed Case%'    Mixed Case String,1340357649000    Mixed Case String,949363200000
    # = operator
    Execute Data Query and Verify Values    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} = 'string with ''quotes'''    ${null value}
    # = operator
    Execute Data Query and Verify Values    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn}='Mixed Case String'    1340357649000    949363200000
    # upper() function
    Execute Data Query and Verify Values    SELECT ${timestampColumn} FROM ${term path} AS t WHERE upper(t.${stringColumn})=upper('mixed case string')    1340357649000    949363200000
    # != operator
    Execute Data Query and Verify Values    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} != 'Mixed Case String'    string with %,1336604400000    string with 'quotes',${null value}
    # lower() function
    Execute Data Query and Verify Values    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE lower(t.${stringColumn}) != lower('MIXED Case STRIng')    string with %,1336604400000    string with 'quotes',${null value}
    # OR operator
    Execute Data Query and Verify Values    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} = 'Mixed Case String' OR t.${stringColumn} = 'string with %'    1340357649000    949363200000    1336604400000
    # AND operator
    Execute Data Query and Verify Values    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} != 'Mixed Case String' AND t.${stringColumn} != 'string with %'    ${null value}
    # ORDER BY operator
    Execute Data Query and Verify Values    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} != 'not present string' ORDER BY ${stringColumn},${timestampColumn}    Mixed Case String,949363200000    Mixed Case String,1340357649000    string with %,1336604400000    string with 'quotes',${null value}
    # COUNT() and DISTINCT() functions
    Execute Data Query and Verify Values    SELECT COUNT(*), COUNT(${stringColumn}), COUNT(DISTINCT ${stringColumn}) FROM ${term path}    7,4,3
    # IN() function
    Execute Data Query and Verify Values    SELECT ${timestampColumn} FROM ${term path} AS t WHERE \ t.${stringColumn} IN ('string with %','string with ''quotes''')    1336604400000    ${null value}

Run String Datatype Parameterised Query
    [Arguments]    ${term path}    ${stringColumn}    ${timestampColumn}
    [Documentation]    This keyword will execute a number queries that have a string filter condition. \ \n\nAll queries will be executed in parameterised form. \n\nThis is testing HUB-API-SSP-QUE-QLC. \n\n\n*Arguments*\n\n- ${term path} = The path to the term to be queried. \n- ${stringColumn} = The name of a string property in the term in ${term path}.\n- ${timestampColumn} = The name of a timestamp property in the term in ${term path}.
    # select string property
    @{parameterised query 1}=    Create List    SELECT ${stringColumn} FROM ${term path}    java.lang.String,p,aaaaaa
    Execute Parameterised Data Query And Verify Values    ${parameterised query 1}    Mixed Case String    Mixed Case String    string with 'quotes'    string with %    ${null value}
    ...    ${null value}    ${null value}
    # LIKE operator
    @{parameterised query 2}=    Create List    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} LIKE :p    java.lang.String,p,M_xed Case%
    Execute Parameterised Data Query And Verify Values    ${parameterised query 2}    Mixed Case String,1340357649000    Mixed Case String,949363200000
    # = operator
    @{parameterised query 3}=    Create List    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} = :p    java.lang.String,p,string with 'quotes'
    Execute Parameterised Data Query And Verify Values    ${parameterised query 3}    ${null value}
    # = operator
    @{parameterised query 4}=    Create List    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn}= :p    java.lang.String,p,Mixed Case String
    Execute Parameterised Data Query And Verify Values    ${parameterised query 4}    1340357649000    949363200000
    # upper() function
    @{parameterised query 5}=    Create List    SELECT ${timestampColumn} FROM ${term path} AS t WHERE upper(t.${stringColumn})=upper(:p)    java.lang.String,p,mixed case string
    Execute Parameterised Data Query And Verify Values    ${parameterised query 5}    1340357649000    949363200000
    # != operator
    @{parameterised query 6}=    Create List    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} != :p    java.lang.String,p,Mixed Case String
    Execute Parameterised Data Query And Verify Values    ${parameterised query 6}    string with %,1336604400000    string with 'quotes',${null value}
    # lower() function
    @{parameterised query 7}=    Create List    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE lower(t.${stringColumn}) != lower(:p)    java.lang.String,p,MIXED Case STRIng
    Execute Parameterised Data Query And Verify Values    ${parameterised query 7}    string with %,1336604400000    string with 'quotes',${null value}
    # OR operator
    @{parameterised query 8}=    Create List    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} = :p OR t.${stringColumn} = :q    java.lang.String,p,Mixed Case String    java.lang.String,q,string with %
    Execute Parameterised Data Query And Verify Values    ${parameterised query 8}    1340357649000    949363200000    1336604400000
    # AND operator
    @{parameterised query 9}=    Create List    SELECT ${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} != :p AND t.${stringColumn} != :q    java.lang.String,p,Mixed Case String    java.lang.String,q,string with %
    Execute Parameterised Data Query And Verify Values    ${parameterised query 9}    ${null value}
    # ORDER BY operator
    @{parameterised query 10}=    Create List    SELECT ${stringColumn},${timestampColumn} FROM ${term path} AS t WHERE t.${stringColumn} != :p ORDER BY ${stringColumn},${timestampColumn}    java.lang.String,p,not present string
    Execute Parameterised Data Query And Verify Values    ${parameterised query 10}    Mixed Case String,949363200000    Mixed Case String,1340357649000    string with %,1336604400000    string with 'quotes',${null value}
    # COUNT() and DISTINCT() functions
    @{parameterised query 11}=    Create List    SELECT COUNT(*), COUNT(${stringColumn}), COUNT(DISTINCT ${stringColumn}) FROM ${term path}    java.lang.String,p,aaaaaa
    Execute Parameterised Data Query And Verify Values    ${parameterised query 11}    7,4,3
    # IN() function
    @{parameterised query 12}=    Create List    SELECT ${timestampColumn} FROM ${term path} AS t WHERE \ t.${stringColumn} IN (:p)    java.lang.String,p,string with %,string with 'quotes'
    Execute Parameterised Data Query And Verify Values    ${parameterised query 12}    1336604400000    null

Run Long String Datatype Query
    [Arguments]    ${term path}    ${longStringColumn}
    [Documentation]    This keyword will execute a queries that have a long string filter condition. \ \n\nThis is testing HUB-API-SSP-QUE-QLC. \n\n\n*Arguments*\n\n- ${term path} = The path to the term to be queried. \n- ${longStringColumn} = The name of the long string property in the term in ${term path}.
    ${longString1}=    Get File    ${CURDIR}/../../../Test Data/Hubtech/Asset Hub/Query Web Service/long string data1.txt
    ${longString2}=    Get File    ${CURDIR}/../../../Test Data/Hubtech/Asset Hub/Query Web Service/long string data2.txt
    ${first 1000 of longString1}=    Get Substring    ${longString1}    0    1000
    ${convert to binary longString1}=    Base64 Encode File To String    ${CURDIR}/../../../Test Data/Hubtech/Asset Hub/Query Web Service/long string data1.txt
    ${convert to binary longString2}=    Base64 Encode File To String    ${CURDIR}/../../../Test Data/Hubtech/Asset Hub/Query Web Service/long string data2.txt
    # select long string property
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path}    ${first 1000 of longString1}    ${longString2}    null    null    null
    ...    null    null
    # = operator
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path} WHERE ${longStringColumn} = '${longString2}'    ${longString2}
    # != operator
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path} WHERE ${longStringColumn} != '${longString2}'    ${first 1000 of longString1}
    # LIKE operator
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path} WHERE ${longStringColumn} LIKE '%ring val%'    ${longString2}
    # upper() function
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path} WHERE upper(${longStringColumn}) LIKE '%VALUE'    ${longString2}
    # lower() function
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path} WHERE lower(${longStringColumn}) LIKE '%value'    ${longString2}
    # FULL_TEXT_OF() operator
    Execute Data Query and Verify Values    SELECT FULL_TEXT_OF(${longStringColumn}) FROM ${term path}    ${convert to binary longString1}    ${convert to binary longString2}    null    null    null
    ...    null    null
    # FULL_TEXT_OF() and LIKE operator
    Execute Data Query and Verify Values    SELECT ${longStringColumn} FROM ${term path} WHERE FULL_TEXT_OF(${longStringColumn}) LIKE '%reference'    ${first 1000 of longString1}
    # DBMS_LOB.substr() operator
    Execute Data Query and Verify Values    SELECT DBMS_LOB.substr(FULL_TEXT_OF(${longStringColumn})) FROM ${term path}    ${longString1}    ${longString2}    null    null    null
    ...    null    null
