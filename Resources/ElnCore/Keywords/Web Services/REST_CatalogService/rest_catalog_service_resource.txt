*** Settings ***
Documentation     A resource file containing IDBS defined keywords used for testing the IDBS E-WorkBook Web Client application. This resource file contains keywords applicable to the REST security administration web service.
...               This file is loaded by the common_resource.txt file which is automatically loaded when running tests through the Robot Framework.
...               *Version: E-WorkBook Web Client 9.2.0*
Library           IDBSHttpLibrary
Library           String
Resource          ../../common_resource.txt
Library           TestDataGenerationLibrary
Library           ../../CatalogWebserviceGUIDLibrary/
Library           OperatingSystem

*** Variables ***
${CATALOG ROOT ELEMENTS ENDPOINT}    /ewb/services/1.0/catalog/elements
${CATALOG TERMS ENDPOINT}    /ewb/services/1.0/catalog/terms
${CATALOG ENDPOINT}    /ewb/services/1.0/catalog

*** Keywords ***
Catalog Service Setup
    [Documentation]    Sets Username and Password to the default valid user to start catalog service test execution.
    ...
    ...    *Arguments*
    ...    None
    ...
    ...    *Return Value*
    ...    None
    ...
    ...    *Preconditions*
    ...    None
    ...
    ...    *Example*
    ...    | Catalog Service Setup |
    Set Suite Variable    ${SERVICES USERNAME}    ${VALID USER}
    Set Suite Variable    ${SERVICES PASSWORD}    ${VALID PASSWD}

Catalog Request Setup
    [Documentation]    - Sets the host name using the ${SERVER} variable
    ...    - Sets the basic authentication credentials using the ${SERVICES USERNAME} and ${SERVICES PASSWORD} variables
    ...    - Sets the Accept and Content-Type request headers to application/json
    ...
    ...    *Arguments*
    ...
    ...    None
    ...
    ...    *Return Value*
    ...
    ...    None
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | Catalog Request Setup |
    Log    ${WEB_SERVICE_HTTP_SCHEME}
    Create Http Context    ${SERVER}:${WEB_SERVICE_PORT}    scheme=${WEB_SERVICE_HTTP_SCHEME}
    Set Basic Auth    ${SERVICES USERNAME}    ${SERVICES PASSWORD}
    Set Request Header    Accept    application/json;charset=utf-8
    Set Request Header    Content-Type    application/json;charset=utf-8

Get All Root Elements
    [Documentation]    Returns all root elements (Dictionaries and Terms)
    ...
    ...    *Arguments*
    ...
    ...    None
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Get Root Element
    [Arguments]    ${element id or path}
    [Documentation]    Gets a specific root element (Dictionary and Term)
    ...
    ...    *Arguments*
    ...
    ...    None
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Get Root Element And Expect Error
    [Arguments]    ${element id or path}    ${expected status code}
    [Documentation]    Attempts to get a root element (Dictionary and Term) and expects error to be returned
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being requested
    ...    expected status code = the expected error code
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    GET    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${expected status code}
    [Return]    ${RESPONSE BODY 1}

Get Element Children
    [Arguments]    ${element id or path}
    [Documentation]    Gets a specific root element (Dictionary and Term)
    ...
    ...    *Arguments*
    ...
    ...    None
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Validate Root Element
    [Arguments]    ${element id or path}    ${element type}    ${element id}    ${element description}    ${element path}    ${element enabled}
    [Documentation]    Validates a root element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path (URL encoded) of the element being validated
    ...
    ...    element type = either "dictionary" or "term"
    ...
    ...    element id = the ID of the element being validated
    ...
    ...    element description = the description of the element being validated
    ...
    ...    element path = the path of the element being validated
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ${RESPONSE BODY} =    Get Root Element    ${element id or path}
    Set Suite Variable    ${RESPONSE BODY}
    ${Response id}=    Get Json Value    ${RESPONSE BODY}    /${element type}/id
    ${Response description}=    Get Json Value    ${RESPONSE BODY}    /${element type}/description
    ${Response path}=    Get Json Value    ${RESPONSE BODY}    /${element type}/path
    ${Response enabled}=    Get Json Value    ${RESPONSE BODY}    /${element type}/enabled
    Should Be Equal    ${Response id}    "${element id}"
    Should Be Equal    ${Response description}    "${element description}"
    Should Be Equal    ${Response path}    "${element path}"
    Should Be Equal    ${Response enabled}    ${element enabled}

Validate Child Element
    [Arguments]    ${parent element id or path}    ${child number}    ${element id}    ${element description}    ${element path}    ${element enabled}
    [Documentation]    Validates a child element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    parent element id or path = the ID or path (URL encoded) of the parent element of the element being validated
    ...
    ...    child number = the number of the child being validated
    ...
    ...    element id = the ID of the element being validated
    ...
    ...    element description = the description of the element being validated
    ...
    ...    element path = the path of the element being validated
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ${RESPONSE BODY} =    Get Root Element    ${parent element id or path}
    Set Suite Variable    ${RESPONSE BODY}
    ${Response id}=    Get Json Value    ${RESPONSE BODY}    /id
    ${Response description}=    Get Json Value    ${RESPONSE BODY}    /description
    ${Response path}=    Get Json Value    ${RESPONSE BODY}    /path
    ${Response enabled}=    Get Json Value    ${RESPONSE BODY}    /enabled
    Should Be Equal    ${Response id}    "${element id}"
    Should Be Equal    ${Response description}    "${element description}"
    Should Be Equal    ${Response path}    "${element path}"
    Should Be Equal    ${Response enabled}    ${element enabled}

Create Root Element
    [Arguments]    ${element type}    ${element name}    ${element description}    ${element enabled}    ${json property string}=none    ${term data type}=none
    [Documentation]    Creates a new root element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element type = whether the element is a TERM or DICTIONARY (no other values allowed)
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...    term data type=none = the optional term data type being specified (terms only)n
    ...
    ...    *Return value*
    ...
    ...    New Catalog Element ID = the ID of the element created
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Run Keyword If    '${element type}'=='DICTIONARY'    Set Request Body    {"dictionary": {"name":"${element name}","description":"${element description}","enabled":${element enabled}}}
    Run Keyword If    '${element type}'=='TERM'    Create Root Term    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${term data type}
    POST    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    Comment    ${New Catalog Element ID}=    Set Variable    ${RESPONSE BODY 1}
    [Return]    ${New Catalog Element ID}

Create Root Element And Expect Error
    [Arguments]    ${element type}    ${expected status code}    ${element name}    ${element description}    ${element enabled}    ${json property string}=none
    ...    ${term data type}=none
    [Documentation]    Attempts to create a new root element (dictionary or term) and expects an error to be returned
    ...
    ...    *Arguments*
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    expected status code = the expected error code
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    Run Keyword If    '${element type}'=='DICTIONARY'    Set Request Body    {"dictionary": {"name":"${element name}","description":"${element description}","enabled":${element enabled}}}
    Run Keyword If    '${element type}'=='TERM'    Create Root Term    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${term data type}
    POST    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${expected status code}
    Log    ${RESPONSE BODY 1}

Create Root Term
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${json property string}    ${term data type}=none
    [Documentation]    Creates a new root term
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string = the JSON string for term properties
    ...
    ...    term data type=none = the optional term data type being specified (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Run Keyword If    '${term data type}'=='none'    Set Request Body    {"term":{"abstractTerm": false,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}
    Run Keyword Unless    '${term data type}'=='none'    Set Request Body    {"term":{"abstractTerm": false,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}

Create Non-Root Element
    [Arguments]    ${parent id or path}    ${element type}    ${element name}    ${element description}    ${element enabled}    ${json property string}=none
    ...    ${term data type}=none
    [Documentation]    Creates a new root element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    parent id or path = the ID or paath of the parent element
    ...
    ...    element type = whether the element is a TERM or DICTIONARY (no other values allowed)
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...    term data type=none = the optional term data type being specified (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    Run Keyword If    '${element type}'=='DICTIONARY'    Set Request Body    {"dictionary": {"name":"${element name}","description":"${element description}","enabled":${element enabled}}}
    Run Keyword If    '${element type}'=='TERM'    Create Root Term    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${term data type}
    POST    ${CATALOG ENDPOINT}/${parent id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    Comment    ${New Catalog Element ID}=    Set Variable    ${RESPONSE BODY 1}
    [Return]    ${New Catalog Element ID}

Create Non-Root Element And Expect Error
    [Arguments]    ${parent id or path}    ${element type}    ${expected status code}    ${element name}    ${element description}    ${element enabled}
    ...    ${json property string}=none    ${term data type}=none
    [Documentation]    Attempts to create a new non-root element (dictionary or term) and expects an error to be returned
    ...
    ...    *Arguments*
    ...
    ...    parent id or path = the ID or paath of the parent element
    ...
    ...    element type = whether the element is a TERM or DICTIONARY (no other values allowed)
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...    term data type=none = the optional term data type being specified (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    Run Keyword If    '${element type}'=='DICTIONARY'    Set Request Body    {"dictionary": {"name":"${element name}","description":"${element description}","enabled":${element enabled}}}
    Run Keyword If    '${element type}'=='TERM'    Create Root Term    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${term data type}
    POST    ${CATALOG ENDPOINT}/${parent id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${expected status code}
    Log    ${RESPONSE BODY 1}

Delete Element
    [Arguments]    ${element id or path}
    [Documentation]    Deletes a catalog element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the element ID or path to be deleted
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    DELETE    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body

Delete Element And Expect Error
    [Arguments]    ${element id or path}    ${expected status code}
    [Documentation]    Attempts to delete a catalog element (dictionary or term) and expects an error to be returned
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the element ID or path to be deleted
    ...
    ...    expected status code = the expected error code
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    DELETE    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${expected status code}

Update Element
    [Arguments]    ${element id or path}    ${element type}    ${element name}    ${element description}    ${element enabled}    ${json property string}=none
    ...    ${term data type}=none
    [Documentation]    Updates an existing element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the path or element to be updated
    ...
    ...    element type = whether the element is a TERM or DICTIONARY (no other values allowed)
    ...
    ...    element name = the new/existing name of the element being updated
    ...
    ...    element description = the new/existing description of the element being updated
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if updating a term.
    ...
    ...    term data type=none = the optional term data type being updated (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...
    ...    *Precondition*n
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    Run Keyword If    '${element type}'=='DICTIONARY'    Set Request Body    {"dictionary": {"name":"${element name}","description":"${element description}","enabled":${element enabled}}}
    Run Keyword If    '${element type}'=='TERM'    Update Root Term    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${term data type}
    POST    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body

Update Element And Expect Error
    [Arguments]    ${element id or path}    ${element type}    ${status code}    ${element name}    ${element description}    ${element enabled}
    ...    ${json property string}=none    ${term data type}=none
    [Documentation]    Updates an existing element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the path or element to be updated
    ...
    ...    element type = whether the element is a TERM or DICTIONARY (no other values allowed)
    ...
    ...    status code = the expected status code to be returned as the response
    ...
    ...    element name = the new/existing name of the element being updated
    ...
    ...    element description = the new/existing description of the element being updated
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if updating a term.
    ...
    ...    term data type=none = the optional term data type being updated (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*n
    Catalog Request Setup
    Run Keyword If    '${element type}'=='DICTIONARY'    Set Request Body    {"dictionary":{"name":"${element name}","description":"${element description}","enabled":${element enabled}}}
    Run Keyword If    '${element type}'=='TERM'    Update Root Term    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${term data type}
    Next Request Should Not Succeed
    POST    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed

Get All Tuples
    [Arguments]    ${element id or path}
    [Documentation]    Returns all tuples for a Term
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Get All Tuples And Expect Error
    [Arguments]    ${element id or path}
    [Documentation]    Attempts to return all tuples for a Term and expects a 404 error to be returned
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    GET    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    404
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Delete All Tuples
    [Arguments]    ${element id or path}
    [Documentation]    Deletes all tuples for a Term
    ...
    ...    *Arguments*
    ...
    ...    ${entity id or path}
    ...
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    DELETE    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Delete All Tuples And Expect Error
    [Arguments]    ${element id or path}
    [Documentation]    Attempts to delete all tuples for a term and expects a 404 error to be returned
    ...
    ...    *Arguments*
    ...    ${entity id or path}
    ...
    ...    *Return value*
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    DELETE    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    404
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Create Tuple
    [Arguments]    ${element id or path}    ${property name 1}    ${property value 1}    ${display value 1}    ${enabled value 1}    ${default value 1}
    [Documentation]    Creates a new tuple for a Term
    ...
    ...    *EXPAND FOR MORE THAN ONE PROPERTY*
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...    *Return value*
    ...
    ...    New Tuple ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ${tuple count}=    Get Number Of Tuples from CatWS    ${element id or path}
    ${tuple count}=    Evaluate    ${tuple count}+1
    Catalog Request Setup
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1},"data":[{"name":"${property name 1}","value":"${property value 1}"}]}}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Validate Number Of Tuples for CatWS    ${element id or path}    ${tuple count}
    ${Temp Tuple ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Tuple ID}=    Replace String    ${Temp Tuple ID}    "    ${EMPTY}
    [Return]    ${New Tuple ID}

Create Tuple And Expect Error
    [Arguments]    ${element id or path}    ${status code}    ${property name 1}    ${property value 1}    ${display value 1}    ${enabled value 1}
    ...    ${default value 1}
    [Documentation]    Creates a new tuple for a Term
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...    status code = the expected status code, one of the following should be expected:
    ...
    ...
    ...    | Status Code | Error Details |
    ...    | 400 | Bad Request |
    ...    | 404 | Resource Not Found |
    ...    | 409 | Resource Conflict |
    ...
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1},"data":[{"name":"${property name 1}","value":"${property value 1}"}]}}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Create Tuple Disabled
    [Arguments]    ${element id or path}    ${property name 1}    ${property value 1}    ${display value 1}    ${enabled value 1}    ${default value 1}
    [Documentation]    Creates a new tuple for a Term - designed for disabled terms which do not get returned in tuple counts.
    ...
    ...    *EXPAND FOR MORE THAN ONE PROPERTY*
    ...
    ...    *Arguments*
    ...    element id or path = the ID or path of the element being used
    ...
    ...    *Return value*
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1},"data":[{"name":"${property name 1}","value":"${property value 1}"}]}}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Get Number Of Tuples from CatWS
    [Arguments]    ${element id or path}
    [Documentation]    Gets the number of tuples currently associated with the specified element.
    ...
    ...    *Arguments*
    ...    element id or path = the ID or path of the element being used
    ...
    ...    *Return Value*
    ...    json length = the length of the tuples JSON object returned
    ...
    ...    *Precondition*
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    ${response}=    Get All Tuples    ${element id or path}
    ${tuple response}=    Get Json Value    ${response}    /tuple
    ${parsed json}=    Parse Json    ${tuple response}
    ${json length}=    Get Length    ${parsed json}
    [Return]    ${json length}

Validate Number Of Tuples for CatWS
    [Arguments]    ${element id or path}    ${expected count}
    [Documentation]    Validates the number of tuples currently associated with the specified element is as expected.
    ...
    ...    *Arguments*
    ...    element id or path = the ID or path of the element being used
    ...    expected count = expected number of tuples for the element
    ...
    ...    *Return Value*
    ...    None
    ...
    ...    *Precondition*
    ...    None
    ...
    ...    *Example*
    ${response}=    Get All Tuples    ${element id or path}
    ${tuple response}=    Get Json Value    ${response}    /tuple
    ${parsed json}=    Parse Json    ${tuple response}
    Length Should Be    ${parsed json}    ${expected count}

Get Tuple
    [Arguments]    ${element id or path}    ${tuple id}
    [Documentation]    Gets tuple information for an individual tuple
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term containing the tuple
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    *Return Value*
    ...
    ...    The response body from the server
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | ${tuple_1}= | Get Tuple | ${term ID} | ${tuple ID} |
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}/tuples/${tuple id}
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Get Tuple And Expect Error
    [Arguments]    ${element id or path}    ${tuple id}    ${status code}
    [Documentation]    Attempts to get tuple information for an individual tuple and expects an error status code to be returned
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term containing the tuple
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    _status code_ - the status code expected to be returned from the server as a result of the request
    ...
    ...    *Return Value*
    ...
    ...    The response body from the server
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | ${tuple_1}= | Get Tuple And Expect Error | ${term ID} | ${tuple ID} | 404 |
    Catalog Request Setup
    Next Request Should Not Succeed
    GET    ${CATALOG TERMS ENDPOINT}/${element id or path}/tuples/${tuple id}
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Delete Tuple
    [Arguments]    ${element id or path}    ${tuple id}
    [Documentation]    Deletes an individual tuple
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term contianing the tuple
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    *Return Value*
    ...
    ...    None
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | Delete Tuple | ${term ID} | ${tuple ID} |
    Catalog Request Setup
    DELETE    ${CATALOG ENDPOINT}/${element id or path}/tuples/${tuple id}

Delete Tuple And Expect Error
    [Arguments]    ${element id or path}    ${tuple id}    ${status code}
    [Documentation]    Attempts to delete an individual tuple and expects an error status code to be returned
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term contianing the tuple
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    _status code_ - the status code expected to be returned from the server as a result of the request
    ...
    ...    *Return Value*
    ...
    ...    None
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | Delete Tuple And Expect Error | ${term ID} | ${tuple ID} | 404 |
    Catalog Request Setup
    Next Request Should Not Succeed
    DELETE    ${CATALOG ENDPOINT}/${element id or path}/tuples/${tuple id}
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed

Update Tuple
    [Arguments]    ${element id or path}    ${tuple id}    ${enabled value 1}    ${default value 1}
    [Documentation]    Updates an individual tuple
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term contianing the tuple
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    _enabled value 1_ - whether the tuple is enabled or disabled (set to true or false)
    ...
    ...    _default value 1_ - whether the tuple is default or not (set to true or false)
    ...
    ...    *Return Value*
    ...
    ...    None
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | Update Tuple | ${term ID} | ${tuple ID} | true | true |
    Comment    ${tuple count}=    Get Number Of Tuples from CatWS    ${element id or path}
    Catalog Request Setup
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1}}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples/${tuple id}
    ${RESPONSE BODY 1}=    Get Response Body
    Comment    Validate Number Of Tuples for CatWS    ${element id or path}    ${tuple count}

Update Tuple And Expect Error
    [Arguments]    ${element id or path}    ${tuple id}    ${status code}    ${enabled value 1}    ${default value 1}
    [Documentation]    Attempts to update an individual tuple and expects an error code to be returned
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term contianing the tuple
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    _status code_ - the expected status code
    ...
    ...    _enabled value 1_ - whether the tuple is enabled or disabled (set to true or false)
    ...
    ...    _default value 1_ - whether the tuple is default or not (set to true or false)
    ...
    ...    *Return Value*
    ...
    ...    None
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | Update Tuple | ${term ID} | ${tuple ID} | 404 | true | true |
    Catalog Request Setup
    Next Request Should Not Succeed
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1}}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples/${tuple id}
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed

Get Tuple Information
    [Arguments]    ${element id or path}
    [Documentation]    Gets tuple information for the first tuple in a particular term
    ...
    ...    *Arguments*
    ...
    ...    _element id or path_ - the ID of the term
    ...
    ...    *Return Value*
    ...
    ...    _tuple id_ - the ID of the tuple
    ...
    ...    _tuple data_ - the data information of the tuple
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | ${tuple_id} | ${tuple_data}= | Get Tuple Information | ${term ID} |
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    ${temp tuple id}=    Get Json Value    ${RESPONSE BODY 1}    /tuple/0/id
    ${tuple id}=    Replace String    ${temp tuple id}    "    ${EMPTY}
    ${tuple data}=    Get Json Value    ${RESPONSE BODY 1}    /tuple/0/data
    [Return]    ${tuple id}    ${tuple data}

Get Term Properties
    [Arguments]    ${element id or path}
    [Documentation]    Gets the properties of a term based on the element id or path
    ...
    ...    *Arguments*
    ...    element id or path = the element id or path of the term being used
    ...
    ...    *Return value*
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Get Element Children And Expect Error
    [Arguments]    ${element id or path}    ${status code}
    [Documentation]    Gets a specific root element (Dictionary and Term)
    ...
    ...    *Arguments*
    ...    None
    ...
    ...    *Return value*
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    GET    ${CATALOG ENDPOINT}/${element id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Delete Child Elements
    [Arguments]    ${element id or path}    ${request_timeout}=30s
    [Documentation]    Deletes the children of a catalog element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the element ID or path or the parent element
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Timeout    ${request_timeout}
    DELETE    ${CATALOG ENDPOINT}/${element id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body

Delete Child Elements And Expect Error
    [Arguments]    ${element id or path}    ${expected status code}
    [Documentation]    Attempts to delete children of a catalog element (dictionary or term) and expects an error to be returned
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the element ID or path of the parent element
    ...
    ...    expected status code = the expected error code
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    DELETE    ${CATALOG ENDPOINT}/${element id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${expected status code}

Create Abstract Term
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${json property string}
    [Documentation]    Creates a new abstract term
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...
    ...    *Return value*
    ...
    ...    New Catalog Element ID = the ID of the element created
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term": {"abstractTerm": true,"name": "${element name}","description": "${element description}","enabled": ${element enabled},"properties": ${json property string}}}
    POST    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    Comment    ${New Catalog Element ID}=    Set Variable    ${RESPONSE BODY 1}
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    [Return]    ${New Catalog Element ID}

Create Abstract Term And Expect Error
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${json property string}    ${expected status code}
    [Documentation]    Creates a new abstract term
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string = the JSON string for term properties. Must be specified.
    ...
    ...    expected status code = the status code expected to be returned
    ...
    ...
    ...    *Return value*
    ...
    ...    Response body in the format specified, JSON by default
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term": {"abstractTerm": true,"name": "${element name}","description": "${element description}","enabled": ${element enabled},"properties": ${json property string}}}
    Next Request Should Not Succeed
    POST    ${CATALOG ENDPOINT}
    Response Status Code Should Equal    ${expected status code}
    ${RESPONSE BODY 1}=    Get Response Body
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Create Inherited Term
    [Arguments]    ${element type}    ${element name}    ${element description}    ${element enabled}    ${json property string}=none    ${term data type}=none
    [Documentation]    Creates a new root element (dictionary or term)
    ...
    ...    *Arguments*
    ...
    ...    element type = whether the element is a TERM or DICTIONARY (no other values allowed)
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...    term data type=none = the optional term data type being specified (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    New Catalog Element ID = the ID of the element created
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}
    POST    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    ${New Catalog Element ID}=    Set Variable    ${RESPONSE BODY 1}
    [Return]    ${New Catalog Element ID}

Validate Abstract Term
    [Arguments]    ${element id or path}    ${element id}    ${element description}    ${element path}    ${element enabled}
    [Documentation]    Validates an abstract term
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path (URL encoded) of the element being validated
    ...
    ...    element type = either "dictionary" or "term"
    ...
    ...    element id = the ID of the element being validated
    ...
    ...    element description = the description of the element being validated
    ...
    ...    element path = the path of the element being validated
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ${RESPONSE BODY} =    Get Root Element    ${element id or path}
    Set Suite Variable    ${RESPONSE BODY}
    ${is abstract}=    Get Json Value    ${RESPONSE BODY}    /term/abstractTerm
    Should Be Equal    ${is abstract}    true
    ${Response id}=    Get Json Value    ${RESPONSE BODY}    /term/id
    ${Response description}=    Get Json Value    ${RESPONSE BODY}    /term/description
    ${Response path}=    Get Json Value    ${RESPONSE BODY}    /term/path
    ${Response enabled}=    Get Json Value    ${RESPONSE BODY}    /term/enabled
    Should Be Equal    ${Response id}    "${element id}"
    Should Be Equal    ${Response description}    "${element description}"
    Should Be Equal    ${Response path}    "${element path}"
    Should Be Equal    ${Response enabled}    ${element enabled}

Update Root Term
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${json property string}    ${term data type}=none
    [Documentation]    Creates a new root term
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string = the JSON string for term properties
    ...
    ...    term data type=none = the optional term data type being specified (terms only)
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Run Keyword If    '${term data type}'=='none'    Set Request Body    {"term":{"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}
    Run Keyword Unless    '${term data type}'=='none'    Set Request Body    {"term":{"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}

Create Concrete Term By Inheritance
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${inherited term string}    ${json property string}
    [Documentation]    Creates a new concrete term element by inheriting other terms
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    inherited term string = the JSON string for inheriting terms
    ...
    ...    property json string=none = the JSON string for term properties. Optional.
    ...
    ...
    ...    *Return value*
    ...
    ...    New Catalog Element ID = the ID of the element created
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{"abstractTerm": false,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string},"inheritedTerms":${inherited term string}}}
    Comment    Run Keyword If    '${element type}'=='TERM'    Create Root Term    ${element name}    ${element description}    ${element enabled}
    ...    ${json property string}    ${term data type}
    POST    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    Comment    ${New Catalog Element ID}=    Set Variable    ${RESPONSE BODY 1}
    [Return]    ${New Catalog Element ID}

Create Concrete Term By Inheritance And Expect Error
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${inherited term string}    ${json property string}    ${expected status code}
    [Documentation]    Attempts to create a new concrete term element by inheriting other terms and expects an error to occur with the status code given by the expected status code value.
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    inherited term string = the JSON string for inheriting terms
    ...
    ...    property json string = the JSON string for term properties.
    ...
    ...    expected status code = the expected status code to be returned by the request
    ...
    ...
    ...    *Return value*
    ...
    ...    None
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{"abstractTerm": false,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string},"inheritedTerms":${inherited term string}}}
    Next Request Should Not Succeed
    POST    ${CATALOG ENDPOINT}
    Response Status Code Should Equal    ${expected status code}
    ${RESPONSE BODY 1}=    Get Response Body
    Next Request Should Succeed

Update Abstract Term
    [Arguments]    ${element id or path}    ${abstract value}    ${element name}    ${element description}    ${element enabled}    ${json property string}
    [Documentation]    Creates a new abstract term
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...
    ...    *Return value*
    ...
    ...    New Catalog Element ID = the ID of the element created
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{ "name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}
    POST    ${CATALOG ENDPOINT}/${element id or path}
    ${RESPONSE BODY 1}=    Get Response Body

Update Abstract Term And Expect Error
    [Arguments]    ${element id or path}    ${abstract value}    ${element name}    ${element description}    ${element enabled}    ${json property string}
    ...    ${expected status code}
    [Documentation]    Creates a new abstract term
    ...
    ...    *Arguments*
    ...
    ...    element name = the name of the element being created
    ...
    ...    element description = the description of the element being created
    ...
    ...    element enabled = whether the element is enabled, either "true" or "false"
    ...
    ...    property json string=none = the JSON string for term properties. Must be specified if creating a term.
    ...
    ...    expected status code = the expected status code returned
    ...
    ...
    ...    *Return value*
    ...
    ...    New Catalog Element ID = the ID of the element created
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{ "name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string}}}
    Next Request Should Not Succeed
    POST    ${CATALOG ENDPOINT}/${element id or path}
    Response Status Code Should Equal    ${expected status code}
    ${RESPONSE BODY 1}=    Get Response Body
    Next Request Should Succeed
    [Return]    ${New Catalog Element ID}

Get Term Hierarchy
    [Arguments]    ${element id or path}
    [Documentation]    Gets the properties of a term based on the element id or path
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the element id or path of the term being used
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/${element id or path}/hierarchy
    ${RESPONSE BODY 1}=    Get Response Body
    log    ${RESPONSE BODY 1}
    [Return]    ${RESPONSE BODY 1}

Create Abstract Term With Inheritance
    [Arguments]    ${element name}    ${element description}    ${element enabled}    ${json property string}    ${inherited term string}
    [Documentation]    Creates an abstract term using inheritance at the root level
    ...
    ...    *Arguments*
    ...
    ...    _element name_ - the name of the term
    ...
    ...    _element description_ - the description of the term
    ...
    ...    _element enabled_ - whether the term should be enabled (should be set to true or false)
    ...
    ...    _json property string_ - the JSON string to be used within the request to create the properties
    ...
    ...    _inherited term _string_ - the JSON string to be used within the request to specify the inherited terms
    ...
    ...    *Return Value*
    ...
    ...    The new term ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{"abstractTerm": true,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string},"inheritedTerms":${inherited term string}}}
    POST    ${CATALOG ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    [Return]    ${New Catalog Element ID}

Create Non-Root Abstract Term
    [Arguments]    ${parent id or path}    ${element type}    ${element name}    ${element description}    ${element enabled}    ${json property string}=none
    ...    ${term data type}=none
    [Documentation]    Creates an Abstract Term under a dictionary identified by ${parent id or path}
    ...
    ...    *Arguments*
    ...
    ...    _parent id or path_ - the ID of the parent dictionary
    ...
    ...    _element type_ - should be set as TERM
    ...
    ...    _element name_ - the name of the term
    ...
    ...    _element description_ - the description of the term
    ...
    ...    _element enabled_ - whether the term should be enabled (should be set to true or false)
    ...
    ...    _json property string_ - the JSON string to be used within the request to create the properties
    ...
    ...    _term data type_ - the term data type to be used
    ...
    ...    *Return Value*
    ...
    ...    The new term ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term": {"abstractTerm": true,"name": "${element name}","description": "${element description}","enabled": ${element enabled},"properties": ${json property string}}}
    POST    ${CATALOG ENDPOINT}/${parent id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    [Return]    ${New Catalog Element ID}

Create Non-Root Abstract Term With Inheritance
    [Arguments]    ${parent id or path}    ${element type}    ${element name}    ${element description}    ${element enabled}    ${inherited term string}=none
    ...    ${json property string}=none    ${term data type}=none
    [Documentation]    Creates an Abstract Term under a dictionary identified by ${parent id or path} with inheritance
    ...
    ...    *Arguments*
    ...
    ...    _parent id or path_ - the ID of the parent dictionary
    ...
    ...    _element type_ - should be set as TERM
    ...
    ...    _element name_ - the name of the term
    ...
    ...    _element description_ - the description of the term
    ...
    ...    _element enabled_ - whether the term should be enabled (should be set to true or false)
    ...
    ...    _inherited term string_ - the JSON string defining the inherited term
    ...
    ...    _json property string_ - the JSON string to be used within the request to create the properties
    ...
    ...    _term data type_ - the term data type to be used
    ...
    ...    *Return Value*
    ...
    ...    The new term ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{"abstractTerm": true,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string},"inheritedTerms":${inherited term string}}}
    POST    ${CATALOG ENDPOINT}/${parent id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    [Return]    ${New Catalog Element ID}

Create Non-Root Concrete Term With Inheritance
    [Arguments]    ${parent id or path}    ${element type}    ${element name}    ${element description}    ${element enabled}    ${inherited term string}=none
    ...    ${json property string}=none    ${term data type}=none
    [Documentation]    Creates a Concrete Term under a dictionary identified by ${parent id or path} with inheritance
    ...
    ...    *Arguments*
    ...
    ...    _parent id or path_ - the ID of the parent dictionary
    ...
    ...    _element type_ - should be set as TERM
    ...
    ...    _element name_ - the name of the term
    ...
    ...    _element description_ - the description of the term
    ...
    ...    _element enabled_ - whether the term should be enabled (should be set to true or false)
    ...
    ...    _inherited term string_ - the JSON string defining the inherited term
    ...
    ...    _json property string_ - the JSON string to be used within the request to create the properties
    ...
    ...    _term data type_ - the term data type to be used
    ...
    ...    *Return Value*
    ...
    ...    The new term ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"term":{"abstractTerm": false,"name":"${element name}","description":"${element description}","enabled":${element enabled},"properties":${json property string},"inheritedTerms":${inherited term string}}}
    POST    ${CATALOG ENDPOINT}/${parent id or path}/children
    ${RESPONSE BODY 1}=    Get Response Body
    ${Temp Catalog Element ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Catalog Element ID}=    Replace String    ${Temp Catalog Element ID}    "    ${EMPTY}
    [Return]    ${New Catalog Element ID}

XML Format Find Request
    [Arguments]    ${element name}    ${constrain path}    ${term or dictionary}    ${concrete or abstract}    ${fromRow}    ${numberOfRows}
    ...    ${enabled or disabled}
    [Documentation]    Runs a 'Find' request on the catalog in the XML format and returns data in the XML format.
    ...
    ...
    ...    *Arguments*
    ...
    ...    *${element name}* = The name of the Term or Dictionary you wish to return. This can be a case sensitive exact match or a partial match with use of wildcards (%). E.g.: ExampleTerm will return only the Terms with the exact atch name for ExampleTerm. Example% will return matches like Example1, ExampleTerm, etc., %xample% will return results like Example1, ExampleTerm, BadSpellingxample1, etc.
    ...
    ...    *${constrain path}* = The catalog path you wish to search under. This can be a case sensitive exact match or use wildcards (%) as described above. E.g.: /Experiment%. Note: This must include the opening '/' character when you enter a value.
    ...
    ...    *${term or dictionary}* = Filters the results based on if you want to search for a DICTIONARY or a TERM.
    ...
    ...    *${concrete or abstract}* = Should be CONCRETE for all DICTIONARY searches as only TERMS can be ABSTRACT. Accepts values of CONCRETE or ABSTRACT only. Allows you to filter your results by the ABSTRACT flag which can be set on a TERM.
    ...
    ...    *${fromRow}* = The results are generated and stored in a data table. You can specify if you wish to view the data from a specific row. This allows you to limit the number of rows of data returned. This must be an inteer value starting from zero (0). To include all data in te table enter a value of zero (0).
    ...
    ...    *${numberOfRows}* = The number of results which meet your search criteria you wish to return. This may be a number greater than the number of actual results (e.g.: your search returns 5 results, this can be set to 500+). This must be an integer value.
    ...
    ...    *${enabled or disabled}* = Filters out the results via the ENABLED or DISABLED status. Must be either the value ENABLED or DISABLED. Can be used for DICTIONARY or TERM searches.
    ...
    ...    *Return Value*
    ...
    ...    Response recieved from the server
    ...
    ...
    ...    *Pre-conditions*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Create Http Context    ${SERVER}:${WEB_SERVICE_PORT}    ${WEB_SERVICE_HTTP_SCHEME}
    Set Basic Auth    ${SERVICES USERNAME}    ${SERVICES PASSWORD}
    Set Request Header    Accept    application/xml;charset=utf-8
    Set Request Header    Content-Type    application/xml;charset=utf-8
    Set Request Body    <filter xmlns="http://catalog.services.ewb.idbs.com" xmlns:ns2="http://common.services.ewb.idbs.com"><name>${element name}</name><predicates><ns2:value>${constrain path}</ns2:value></predicates><flag>${term or dictionary}</flag><flag>${concrete or abstract}</flag><flag>${enabled or disabled}</flag><limits><fromRow>${fromRow}</fromRow><numberOfRows>${numberOfRows}</numberOfRows></limits></filter>
    POST    ${CATALOG ROOT ELEMENTS ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    log    ${RESPONSE BODY 1}
    [Return]    ${RESPONSE BODY 1}

JSON Format Find Request
    [Arguments]    ${element name}    ${constrain path}    ${term or dictionary}    ${concrete or abstract}    ${fromRow}    ${numberOfRows}
    ...    ${enabled or disabled}
    [Documentation]    Runs a 'Find' request on the catalog in the JSON format and returns data in the JSON format.
    ...
    ...    *Arguments*
    ...
    ...    *${element name}* = The name of the Term or Dictionary you wish to return. This can be a case sensitive exact match or a partial match with use of wildcards (%). E.g.: ExampleTerm will return only the Terms with the exact atch name for ExampleTerm. Example% will return matches like Example1, ExampleTerm, etc., %xample% will return results like Example1, ExampleTerm, BadSpellingxample1, etc.
    ...
    ...    *${constrain path}* = The catalog path you wish to search under. This can be a case sensitive exact match or use wildcards (%) as described above. E.g.: /Experiment%. Note: This must include the opening '/' character when you enter a value.
    ...
    ...    *${term or dictionary}* = Filters the results based on if you want to search for a DICTIONARY or a TERM.
    ...
    ...    *${concrete or abstract}* = Should be CONCRETE for all DICTIONARY searches as only TERMS can be ABSTRACT. Accepts values of CONCRETE or ABSTRACT only. Allows you to filter your results by the ABSTRACT flag which can be set on a TERM.
    ...
    ...    *${fromRow}* = The results are generated and stored in a data table. You can specify if you wish to view the data from a specific row. This allows you to limit the number of rows of data returned. This must be an inteer value starting from zero (0). To include all data in te table enter a value of zero (0).
    ...
    ...    *${numberOfRows}* = The number of results which meet your search criteria you wish to return. This may be a number greater than the number of actual results (e.g.: your search returns 5 results, this can be set to 500+). This must be an integer value.
    ...
    ...    *${enabled or disabled}* = Filters out the results via the ENABLED or DISABLED status. Must be either the value ENABLED or DISABLED. Can be used for DICTIONARY or TERM searches.
    ...
    ...    *${user or system}* = Decides whether results should include the system created dictionaries/terms or only user created ones. System created ones are eithe rhidden or the Experiment Dictionaries dictionary and terms. user ones are created by a user. Accepts values of USER and SYSTEM.
    ...
    ...
    ...    *Return Value*
    ...
    ...    Response recieved from the server
    ...
    ...
    ...    *Pre-conditions*
    ...
    ...    None
    ...
    ...
    ...    *Example*
    Catalog Request Setup
    Set Request Body    {"name": "${element name}","predicates": {"value": ["${constrain path}"]},"flag": ["${term or dictionary}","${concrete or abstract}","${enabled or disabled}"],"limits": {"fromRow": "${fromRow}","numberOfRows": "${numberOfRows}"}}
    POST    ${CATALOG ROOT ELEMENTS ENDPOINT}
    ${RESPONSE BODY 1}=    Get Response Body
    [Return]    ${RESPONSE BODY 1}

Create Property JSON
    [Arguments]    ${name}    ${type}    ${description}    ${key}    ${display}    ${format}=null
    ...    ${constraint}=null    ${unit}=null    ${unit_term_path}=null    ${link_term_path}=null    ${override_property_id}=null    ${term_reference_id}=null
    ...    ${hidden}=false    ${owner}=false    ${abstract_term_reference}=false
    [Documentation]    Creates the property JSON required for term creation - this JSON should be wrapped in the properties JSON object before being used for term creation.
    ...
    ...    *Mandatory Arguments*
    ...
    ...    _name_ - the name of the property
    ...
    ...    _type_ - the property type
    ...
    ...    _description_ - the property description
    ...
    ...    _key_ - whether the property should be a key property. Should be true or false
    ...
    ...    _display_ - whether the property should be a display property. Should be true or false
    ...
    ...    *Optional Arguments*
    ...
    ...    _format_ - the format string for the property format
    ...
    ...    _constraint_ - the format string for the property constraint
    ...
    ...    _unit_ - the format string for the property unit value
    ...
    ...    _unit_term_path_ - the path to the unit term
    ...
    ...    _link_term_path_ - the path to the link term
    ...
    ...    _override_property_id_ - the ID of the property (not Term ID) to override by this property
    ...
    ...    _term_reference_id_ - the ID of the abstract term being referenced
    ...
    ...    _hidden_ - defaults to false
    ...
    ...    _owner_ - defaults to false
    ...
    ...    _abstract_term_reference_ - whether this term has an abstract term reference, should be true or false. Defaults to false
    ...
    ...    *Return Value*
    ...
    ...    ${property_json} - the JSON string for the individual property
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    *TO BE ADDED*
    # Ensure optional values are quoted if not null
    ${format}=    Set Variable If    "${format}"=="null"    ${format}    "${format}"
    ${constraint}=    Set Variable If    "${constraint}"=="null"    ${constraint}    "${constraint}"
    ${unit}=    Set Variable If    "${unit}"=="null"    ${unit}    "${unit}"
    ${unit_term_path}=    Set Variable If    "${unit_term_path}"=="null"    ${unit_term_path}    "${unit_term_path}"
    ${link_term_path}=    Set Variable If    "${link_term_path}"=="null"    ${link_term_path}    "${link_term_path}"
    ${override_property_id}=    Set Variable If    "${override_property_id}"=="null"    ${override_property_id}    {"override":{"id":"${override_property_id}"}}
    ${term_reference_id}=    Set Variable If    "${term_reference_id}"=="null"    ${term_reference_id}    {"id":"${term_reference_id}"}
    # Create JSON string
    ${property_json}=    Set Variable    {"name":"${name}","type":"${type}","format":${format},"description":"${description}","constraint":${constraint},"unit":${unit},"key":${key},"displayed":${display},"unitTermPath":${unit_term_path},"linkTermPath":${link_term_path},"overrides":${override_property_id},"hidden":${hidden},"owner":${owner},"abstractTermRef":${abstract_term_reference},"termReference":${term_reference_id}}
    [Return]    ${property_json}

Create Properties JSON
    [Arguments]    @{properties_list}
    [Documentation]    Wraps up any number of property JSON strings (created via the "Create Property JSON" keyword) into a properties JSON string. This is required before sending the properties JSON to the server.
    ...
    ...    *Arguments*
    ...
    ...    _properties_ - a list of individual property JSON strings
    ...
    ...    *Return Value*
    ...
    ...    _properties_json_ - the wrapped properties JSON string
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...    | ${properties_json}= | Create Properties JSON | ${property_1} | ${property_2} |
    ${properties_json}=    Set Variable    @{properties_list}[0]
    ${number_of_properties}=    Get Length    ${properties_list}
    : FOR    ${property}    IN RANGE    1    ${number_of_properties}
    \    ${properties_json}=    Set Variable    ${properties_json},@{properties_list}[${property}]
    ${properties_json}=    Set Variable    {"property":[${properties_json}]}
    Log    Created JSON: ${properties_json}
    [Return]    ${properties_json}

Create Properties JSON With Single Property
    [Arguments]    ${name}    ${type}    ${description}    ${key}    ${display}    ${format}=null
    ...    ${constraint}=null    ${unit}=null    ${unit_term_path}=null    ${link_term_path}=null    ${override_property_id}=null    ${term_reference_id}=null
    ...    ${hidden}=false    ${owner}=false    ${abstract_term_reference}=false
    [Documentation]    Creates a JSON string for a single property wrapped in a properties JSON object - this can be passed directly into a request.
    ...
    ...    This is a helper keyword, it is the equivilent of calling "Create Property JSON" and then passing the result directly to "Create Properties JSON"
    ...
    ...
    ...    *Mandatory Arguments*
    ...
    ...    _name_ - the name of the property
    ...
    ...    _type_ - the property type
    ...
    ...    _description_ - the property description
    ...
    ...    _key_ - whether the property should be a key property. Should be true or false
    ...
    ...    _display_ - whether the property should be a display property. Should be true or false
    ...
    ...    *Optional Arguments*
    ...
    ...    _format_ - the format string for the property format
    ...
    ...    _constraint_ - the format string for the property constraint
    ...
    ...    _unit_ - the format string for the property unit value
    ...
    ...    _unit_term_path_ - the path to the unit term
    ...
    ...    _link_term_path_ - the path to the link term
    ...
    ...    _override_property_id_ - the ID of the property (not Term ID) to override by this property
    ...
    ...    _term_reference_id_ - the ID of the abstract term being referenced
    ...
    ...    _hidden_ - defaults to false
    ...
    ...    _owner_ - defaults to false
    ...
    ...    _abstract_term_reference_ - whether this term has an abstract term reference, should be true or false. Defaults to false
    ...
    ...    *Return Value*
    ...
    ...    _properties_json_ - the wrapped JSON string for the properties
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    *TO BE ADDED*
    ${property}=    Create Property JSON    ${name}    ${type}    ${description}    ${key}    ${display}
    ...    ${format}    ${constraint}    ${unit}    ${unit_term_path}    ${link_term_path}    ${override_property_id}
    ${properties_json}=    Create Properties JSON    ${property}
    [Return]    ${properties_json}

Create Tuple 2 Properties
    [Arguments]    ${element id or path}    ${property name 1}    ${property value 1}    ${display value 1}    ${enabled value 1}    ${default value 1}
    ...    ${property name 2}    ${property value 2}
    [Documentation]    Creates a new tuple for a Term
    ...
    ...    *EXPAND FOR MORE THAN ONE PROPERTY*
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...    *Return value*
    ...
    ...    New Tuple ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ${tuple count}=    Get Number Of Tuples from CatWS    ${element id or path}
    ${tuple count}=    Evaluate    ${tuple count}+1
    Catalog Request Setup
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1},"data":[{"name":"${property name 1}","value":"${property value 1}"}, {"name":"${property name 2}","value":"${property value 2}"}]}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Validate Number Of Tuples for CatWS    ${element id or path}    ${tuple count}
    ${Temp Tuple ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Tuple ID}=    Replace String    ${Temp Tuple ID}    "    ${EMPTY}
    [Return]    ${New Tuple ID}

Create Tuple 2 Properties And Expect Error
    [Arguments]    ${element id or path}    ${status code}    ${property name 1}    ${property value 1}    ${display value 1}    ${enabled value 1}
    ...    ${default value 1}    ${property name 2}    ${property value 2}
    [Documentation]    Creates a new tuple for a Term
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...    status code = the expected status code, one of the following should be expected:
    ...
    ...
    ...    | Status Code | Error Details |
    ...    | 400 | Bad Request |
    ...    | 404 | Resource Not Found |
    ...    | 409 | Resource Conflict |
    ...
    ...
    ...    *Return value*
    ...
    ...    Response body is returned, in the format specified during setup (default = JSON)
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    Catalog Request Setup
    Next Request Should Not Succeed
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1},"data":[{"name":"${property name 1}","value":"${property value 1}"}, {"name":"${property name 2}","value":"${property value 2}"}]}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Response Status Code Should Equal    ${status code}
    Next Request Should Succeed
    [Return]    ${RESPONSE BODY 1}

Create Tuple Data For Property JSON
    [Arguments]    ${name}    ${value}    ${displayValue}
    [Documentation]    Creates the data property JSON required for tuple creation - this JSON should be wrapped in the data JSON object before being used for term creation (see Create Tuple Data JSON)
    ...
    ...    *Arguments*
    ...
    ...    _name_ - the name of the property to which this data applies
    ...
    ...    _value_ - the value of the property for this tuple
    ...
    ...    _displayValue_ - the displayValue of this value (often the same as _value_
    ...
    ...    *Return Value*
    ...
    ...    ${data_property_json} - the JSON string for the individual data property for a tuple
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | ${data_property_json}= | Create Tuple Data For Property JSON | name | Brian | Bri |
    # Create JSON string
    ${data_property_json}=    Set Variable    {"name":"${name}","value":"${value}","displayValue":"${displayValue}"}
    [Return]    ${data_property_json}

Create Tuple Data JSON
    [Arguments]    @{data_properties_list}
    [Documentation]    Wraps up any number of tuple data property JSON strings (created via the "Create Tuple Data For Property JSON" keyword) into a tuple data JSON string. This is required before sending the tuple JSON to the server.
    ...
    ...    *Arguments*
    ...
    ...    _data_properties_ - a list of individual data property JSON strings
    ...
    ...    *Return Value*
    ...
    ...    _data_json_ - the wrapped data JSON string ready to go into a tuple
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...    | ${tuple_data_json}= | Create Tuple Data JSON | ${data_property_1} | ${data_property_2} |
    ${data_json}=    Set Variable    @{data_properties_list}[0]
    ${number_of_properties}=    Get Length    ${data_properties_list}
    : FOR    ${property}    IN RANGE    1    ${number_of_properties}
    \    ${data_json}=    Set Variable    ${data_json},@{data_properties_list}[${property}]
    ${data_json}=    Set Variable    "data":[${data_json}]
    Log    Created JSON: ${data_json}
    [Return]    ${data_json}

Create Tuple With Properties
    [Arguments]    ${term_id}    ${data_json}
    [Documentation]    Creates a new tuple for a Term
    ...
    ...
    ...    *Arguments*
    ...
    ...    term_id = the ID of the term to add the tuples to.
    ...    data = the data for the tuple (see Create Tuple Data JSON)
    ...
    ...    *Return value*
    ...
    ...    New Tuple ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | ${tuple_id}= | Create Tuple With Properties | ${term_id} | ${data_json} |
    ${tuple count}=    Get Number Of Tuples from CatWS    ${term_id}
    ${tuple count}=    Evaluate    ${tuple count}+1
    Catalog Request Setup
    Set Request Body    { \ "enabled" : true, \ ${data_json} }
    POST    ${CATALOG ENDPOINT}/${term_id}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Validate Number Of Tuples for CatWS    ${term_id}    ${tuple count}
    ${Temp Tuple ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Tuple ID}=    Replace String    ${Temp Tuple ID}    "    ${EMPTY}
    [Return]    ${New Tuple ID}

Get Term Path From Id
    [Arguments]    ${id}
    [Documentation]    returns the path of the term based on the specified ID
    ...
    ...
    ...    *Arguments*
    ...
    ...    _id_ = the ID of the term we want the path for
    ...
    ...
    ...    *Return value*
    ...
    ...    the path
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | ${path}= | Get Term Path From Id | ${term_id} |
    ${term_json}=    Get Term Properties    ${id}
    ${path}=    Get Json Value    ${term_json}    /term/path
    ${path}=    Replace String    ${path}    "    ${EMPTY}
    [Return]    ${path}

Get Term Id From Path
    [Arguments]    ${term_path}    ${http_status_code}=200
    [Documentation]    Gets a term id by providing its path
    ...
    ...    *Arguments*
    ...
    ...    - _term_path_: The term path
    ...
    ...    - _http_status_code_: The expected HTTP response status. Default is 200
    ...
    ...    *Return Value*
    ...
    ...    The term id
    Catalog Request Setup
    GET    ${CATALOG ENDPOINT}/id?path=${term_path}
    Response Status Code Should Equal    ${http_status_code}
    ${json_response}=    Get Response Body
    ${term_id}=    Get Json Value    ${json_response}    /id
    # Remove double quote
    ${term_id}=    String.Replace String    ${term_id}    "    ${EMPTY}
    [Return]    ${term_id}    # The term id

Create tuple 3 properties
    [Arguments]    ${element id or path}    ${property name 1}    ${property value 1}    ${display value 1}    ${enabled value 1}    ${default value 1}
    ...    ${property name 2}    ${property value 2}    ${property name 3}    ${property value 3}
    [Documentation]    Creates a new tuple for a Term
    ...
    ...    *EXPAND FOR MORE THAN ONE PROPERTY*
    ...
    ...    *Arguments*
    ...
    ...    element id or path = the ID or path of the element being used
    ...
    ...    *Return value*
    ...
    ...    New Tuple ID
    ...
    ...    *Precondition*
    ...
    ...    None
    ...
    ...    *Example*
    ${tuple count}=    Get Number Of Tuples from CatWS    ${element id or path}
    ${tuple count}=    Evaluate    ${tuple count}+1
    Catalog Request Setup
    Set Request Body    {"enabled":${enabled value 1},"defaultTuple":${default value 1},"data":[{"name":"${property name 1}","value":"${property value 1}"}, {"name":"${property name 2}","value":"${property value 2}"}, {"name":"${property name 3}","value":"${property value 3}"}]}
    POST    ${CATALOG ENDPOINT}/${element id or path}/tuples
    ${RESPONSE BODY 1}=    Get Response Body
    Validate Number Of Tuples for CatWS    ${element id or path}    ${tuple count}
    ${Temp Tuple ID}=    Get Json Value    ${RESPONSE BODY 1}    /id
    ${New Tuple ID}=    Replace String    ${Temp Tuple ID}    "    ${EMPTY}
    [Return]    ${New Tuple ID}

Ensure Catalog Element does not exist
    [Arguments]    ${term_path}
    [Documentation]    Checks to see if a catalog term exists and deletes it if it does.
    ...
    ...    *Arguments*
    ...
    ...    _${term_path}_ Path to term in catalog.
    ...
    ...    *Return Value*
    ...
    ...    None
    ...
    ...    *Preconditions*
    ...
    ...    None
    ...
    ...    *Example*
    ...
    ...    | Ensure Catalog Term does not exist | /Test Term |
    ${status}    ${term_name}    Run Keyword And Ignore Error    Get Term Guid From Catalog Webservice    ${term_path}
    Run Keyword If    '${status}'=='PASS'    Delete Element    ${term_name}

Import XML to Catalog via Web Service
    [Arguments]    ${xml}    ${host}=${SERVER}    ${services_port}=${WEB_SERVICE_PORT}    ${ewb_user}=${ADMIN USER}    ${ewb_password}=${ADMIN PASSWD}
    [Documentation]    Uses the CatTool.jar (written by Martin Brown) to import an xml to the catalog via web service calls. The test running machine must have JRE installed (not all runs do, so check with the automation team before using this keyword).
    ...
    ...    *Arguments*:
    ...    - ${xml} - The xml path
    ...
    ...    *Optional Arguments*:
    ...    - ${host} - The services host (usually the app server)
    ...    - ${services_port} - Web service port (usually 8443)
    ...    - ${ewb_user} & ${ewb_password} - Must have relevant permissions.
    ${cat_tool}=    Join Path    ${CURDIR}    ..    ..    ..    Libraries
    ...    Web Services    REST_CatalogService    Catalog Import Tool    CatTool.jar
    ${output}=    Run    java -jar "${cat_tool}" import "${xml}" ${host} ${services_port} ${ewb_user} ${ewb_password}
    Log    ${output}

Import XML Robust
    [Arguments]    ${xml_path}    ${element_name}    ${catalog_path}=/
    [Documentation]    Checks to see if a dictionary can be found in the catalog by name and, if not, imports one. Robust because it doesn't fail if the dictionary/element is already present.
    ...
    ...    Arguments:
    ...    - ${xml_path} - The full path to the xml file you wish to import.
    ...    - ${element_name} - The name of the element you wish to import. The keyword will check if it is already present and, if so, not attempt to reimport.
    ...    - ${catalog_path}=/ - The path of the element. Defaults to root (/). This is only required if there is already a dictionary present with the same name elsewhere in the Catalog.
    ...
    ...    _Example Use:_
    ...    | *Import XML Element Robust* | C:\\my.xml | My Dictionary |
    ...
    ...
    ...    Will import a dictionary named 'My Dictionary' to the root path of the catalog using the xml found at C:\\my.xml
    ${json}=    JSON Format Find Request    ${element_name}    ${catalog_path}    DICTIONARY    CONCRETE    0
    ...    10    ENABLED
    ${null_response}=    Set Variable    {"catalog":null}
    Run Keyword If    '${json}' == '${null_response}'    Import XML to Catalog via Web Service    ${xml_path}
    Run Keyword If    '${json}' == '${null_response}'    Log    XML file '${xml_path}' was successfully imported to the catalog.
    Run Keyword If    '${json}' != '${null_response}'    Log    The element named '${element_name}' was found to already exist somewhere under the following catalog path: '${catalog_path}'. The xml was not imported to the catalog.
